/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface GetPostResponse
 */
export interface GetPostResponse {
  /**
   *
   * @type {Post}
   * @memberof GetPostResponse
   */
  data?: Post
}
/**
 *
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
  /**
   *
   * @type {User}
   * @memberof GetUserResponse
   */
  data?: User
}
/**
 *
 * @export
 * @interface ListPostResponse
 */
export interface ListPostResponse {
  /**
   *
   * @type {Array<Post>}
   * @memberof ListPostResponse
   */
  data?: Array<Post>
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {number}
   * @memberof Post
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Post
   */
  type?: string
  /**
   *
   * @type {PostContent}
   * @memberof Post
   */
  attributes?: PostContent
}
/**
 *
 * @export
 * @interface PostContent
 */
export interface PostContent {
  /**
   *
   * @type {number}
   * @memberof PostContent
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof PostContent
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PostContent
   */
  content?: string
  /**
   *
   * @type {number}
   * @memberof PostContent
   */
  status?: number
  /**
   *
   * @type {string}
   * @memberof PostContent
   */
  created?: string
  /**
   *
   * @type {string}
   * @memberof PostContent
   */
  updated?: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  type?: string
  /**
   *
   * @type {UserContent}
   * @memberof User
   */
  attributes?: UserContent
}
/**
 *
 * @export
 * @interface UserContent
 */
export interface UserContent {
  /**
   *
   * @type {number}
   * @memberof UserContent
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserContent
   */
  name?: string
}

/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieves a post
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getPost', 'id', id)
      const localVarPath = `/api/v1/posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieves a list of posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPosts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Retrieves a post
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPost(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Retrieves a list of posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPosts(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPostResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPosts(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PostApiFp(configuration)
  return {
    /**
     *
     * @summary Retrieves a post
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPost(id: number, options?: any): AxiosPromise<GetPostResponse> {
      return localVarFp.getPost(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieves a list of posts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPosts(options?: any): AxiosPromise<ListPostResponse> {
      return localVarFp.listPosts(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
  /**
   *
   * @summary Retrieves a post
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getPost(id: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .getPost(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieves a list of posts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public listPosts(options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .listPosts(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieves a user
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUser', 'id', id)
      const localVarPath = `/api/v1/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Retrieves a user
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     *
     * @summary Retrieves a user
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: number, options?: any): AxiosPromise<GetUserResponse> {
      return localVarFp.getUser(id, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Retrieves a user
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(id: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
